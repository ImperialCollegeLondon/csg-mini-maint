#!/usr/bin/perl

=head1 NAME

minimaint

=head1 SYNOPSIS

minimaint --list [other options]
minimaint [other script options] scriptname scriptname...

=head1 DESCRIPTION

Runs all the maint scripts, or just scriptnames provided (dropping the numeric
prefix).  eg 'minimaint dist' runs the "dist" minimaint script.
Reads configuration information from /etc/minimaint by default,
or $ENV{MM_CONFIG_DIR} if it's set.

=head2 Options

  --list              - Display all scriptnames and exit
  --help|usage        - Display help screen
  --[no]debug         - Print extra information
  --[no]dry-run       - Don't really do stuff, just go through the motions
  --[no]silent        - Don't print anything but warnings and errors
  --[no]logperline    - Display log message one per line (default no)
  --[no]colour        - Display log message with colour (default yes)
  --[no]machineread   - Makes logs machine readable
  --mode=boot
         cron-15
         cron-30
         cron-60
	 cron-0300hrs
	 cron-0400hrs
         install
         manual          - Set the run "mode"
  --trace=none|caller|stack
                      - sets trace mode
=cut

# --- Compiler directives ---------------------------------------------------

use strict;
use warnings;
use File::Basename;
use File::Slurp;
use File::Path;
use JSON;
use Cwd qw(abs_path);
use Data::Dumper;
use Getopt::Long qw(:config gnu_getopt pass_through);

# --- Global variables ------------------------------------------------------

our %config;			# our configuration info

# bits of the config, pulled out for convenience..

our $gitrepo;			# URL of git repo containing the source
our $lsbid;			# which distro (eg Ubuntu)
our $lsbrelease;		# which release of Ubuntu (eg 16.04)
our $cachedir;			# where to store local src eg /var/cache/minimaint
our $distribution;		# lc(lsbid)+'-'+lsbrelease, eg ubuntu-16.04

#my $git = "/usr/bin/git";

# Computed later
our $configdir;
our $maintroot;
our $perllibpath;

our $perlbin = "/usr/bin/perl";
our $scriptsubdir = 'maintscripts';
our $maintscriptfile = 'maint';
our $scriptlock = 'maint-driver';

# --- Subroutines -----------------------------------------------------------

# The following subroutines run from BEGIN, which means they run even when
# syntax checking, and of course, long before we're allowed to use maint
# features!

#
# loadconfig();
#	load the compulsory configuration file..
#
sub loadconfig()
{
	$configdir = "/etc/minimaint";
	$configdir = $ENV{MM_CONFIG_DIR} if defined $ENV{MM_CONFIG_DIR};
	my $file = "$configdir/info";
	my $text = read_file( $file ) ||
		die "minimaint: can't slurp config file $file\n";
	my $configdata = decode_json($text);
	#die Dumper $configdata;
	%config = %$configdata;

	$gitrepo = $config{gitrepo} || die "minimaint: no config gitrepo\n";
	$lsbid = $config{lsbid} || die "minimaint: no config lsbid\n";
	$lsbrelease = $config{lsbrelease} ||
		die "minimaint: no config lsbrelease\n";
	$distribution = lc("$lsbid-$lsbrelease");
	$cachedir = $config{cachedir} || die "minimaint: no config cachedir\n";
}


#
# fullclone( $git, $giturl, $repodest );
#	blow the destination target dir away, fresh clone.
#
sub fullclone ($$$)
{
	my( $git, $giturl, $repodest ) = @_;

	print "Clone failed; retrying from first principles...\n";
	system("rm -rf $repodest");
	mkpath([$repodest], 0, 0755);
	chdir($repodest);

	system("$git clone --depth 1 --quiet $giturl $repodest") == 0 ||
		die "Clone still failed, failed\n";
}


#
# loadcache( $giturl, $repodest );
#	Synchronize our local cache from upstream via git,
#	given $giturl, the remote url to grab, and
#	$repodest, the path to store our local cache,
#	e.g. /var/cache/minimaint/.
#
sub loadcache ($$)
{
	my( $giturl, $repodest ) = @_;

	mkpath([$repodest], 0, 0755) unless -d $repodest;

	-d $repodest || die "Cannot create directory $repodest\n";
	-w $repodest || die "directory $repodest not writable!\n";

	my $git = "/usr/bin/git";

	# If we don't have any local version of the repository at all,
	# create a new clone.
	unless( -e "$repodest/.git" )
	{
		print "Cloning maint repository to $repodest...\n";
		system("$git clone --depth 1 --quiet $giturl $repodest") == 0
			|| fullclone( $git, $giturl, $repodest );
	}

	# Update the current repository using a simple fast-forward strategy.
	chdir($repodest);
	system("$git pull --quiet --ff-only") == 0
		|| fullclone( $git, $giturl, $repodest );
}


# Check that we're running the version of the operating system that we should
# be -- otherwise, abort post-haste!

sub check_os_version()
{
	my $actual_id = `/usr/bin/lsb_release -i -s`;
	chomp $actual_id;

	my $actual_release = `/usr/bin/lsb_release -r -s`;
	chomp $actual_release;

	unless( $actual_id eq $lsbid && $actual_release eq $lsbrelease )
	{
		die "Local operating system is '$actual_id $actual_release', ".
		    "not '$lsbid $lsbrelease'; aborting now\n".
		    "to avoid clobbering things I don't understand!\n";
	}
}

# Perform execution bootstrapping functions:
#  - Compute $maintroot and $perllibpath,
#  - Sync the local cache,
#  - Load the Maint libaries from that cache.

sub bootstrap()
{
	# Make sure we're sitting somewhere safe.
	chdir("/");

	# set up our PATH to make sure life is sane
	$ENV{PATH} = '/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin';
	mkpath( [$cachedir], 0, 0755) unless -d $cachedir;

	print "Syncing local cache...\n";
	loadcache( $gitrepo, $cachedir );
	$maintroot = $cachedir;

	$perllibpath = "$maintroot/$distribution/lib/perl";
#
	unshift(@INC, $perllibpath); # Cannot use "use lib" directly
	unshift(@INC, "/vol/csg/public/users/dcw/git-projects/csg-mini-maint/ubuntu-16.04/lib/perl" );	# DCW.. temp, gross, hack
	require Maint; import Maint qw(:all);
}

# Prior to this point, we haven't been able to refer to *any*
# Maint functions or constants.
# Let's read in the config information, check that we're running the correct
# OS, then run the bootstrap sequence *right now* so that we can.

BEGIN {
	loadconfig();
	check_os_version();
	bootstrap();
}

# From now on, we CAN use Maint functions..


#
# runmaintscript( $scriptpath, @args );
#	Run a specific named maint-script as identified by it's script
#	path and name, with the given args
#
sub runmaintscript
{
	my( $scriptpath, @args ) = @_;
	unless( -f $scriptpath )
	{
		maint_log(LOG_WARNING, "file $scriptpath doesn't exist");
		return 0;
	}
	unless( -x $scriptpath )
	{
		maint_log(LOG_WARNING, "script file $scriptpath isn't executeable - skipping");
		return 0;
	}
	my $nocrashonerr = 1; # If we're in install mode, we do want to crash
	$nocrashonerr = 1 if maint_testmode('install');

	maint_runcmd([$perlbin, '-I', $perllibpath, $scriptpath, @args],
		undef, $nocrashonerr, undef, \*STDOUT, \*STDERR);
	return 1;
}


#
# my @results = findscripts();
#	Locate all the maint scripts that we have available, return a list.
#
sub findscripts()
{
	my @results = ();
	my %seen = ();
	my $scriptdir = "$maintroot/$distribution/$scriptsubdir";

	# Scan the directory
	maint_log(LOG_DEBUG, "Opening script directory $scriptdir");
	unless( opendir(DIR, $scriptdir) )
	{
		maint_log(LOG_ERR, "Cannot open directory $scriptdir for reading");
	}
	foreach my $f (readdir(DIR))
	{
		if( $f =~ m/^\./ ) # Ignore anything beginning with .
		{
			maint_log(LOG_DEBUG, "Ignoring $f");
			next;
		}
		my $d = "$scriptdir/$f";
		next unless -f $d;          # Ignore non files
		maint_log(LOG_DEBUG, "Looking at file $d");
		if( $f =~ m/^(\d+)([[:alpha:]\-_]+)$/ )
		{
			my $num  = 0 + $1;
			my $base = $2;
			maint_log(LOG_DEBUG, "Found maint file $d, number=$num, base=$base");
			if( exists $seen{$base} )
			{
				maint_log(LOG_WARNING,
"You have more than one maint script with the same base name - conflicting script is called $f - skipping"
				);
				next;
			}
			push @results,
				{ num => $num, file => $d, base => $base };
			$seen{$base}++;
		}
		else
		{
			maint_log(LOG_WARNING,
"Maint directory $d has invalid form, ignoring. To enable, make sure it matches \\d+[[:alpha:]]+"
			);
		}
	}
	close DIR;
	return @results;
}


# --- Main program ----------------------------------------------------------


# copy $configdir and %config into maint's inner depths..
maint_setconfig( $configdir, \%config );

my %scriptdirs = ();         # Global for passing set of scripts around
my @origargv  = @ARGV;
my @classlist = ();

# Process the generic options
maint_initarg();             # @ARGV contains remaining args only

# Init logging
maint_setlogging();

# process command line args
maint_usage() unless maint_getattr("list") || @ARGV;
our @scripts = @ARGV;

# Put back script args
@ARGV = ();
maint_pushargs();

maint_log( LOG_DEBUG, "scripts to run: ". join(' ',@scripts) ) if @scripts;

# Check if root.
#DCWdie "minimaint: need to run as root\n" if $> != 0;

maint_initlog("maint system in $cachedir (production mode)");

my @scriptinfo = findscripts();

# list mode: display the names of all maint scripts
if( maint_getattr( "list" ) == 1 )
{
	# Scan all scripts
	foreach my $sc (@scriptinfo)
	{
		my $num = $sc->{num};
		my $base = $sc->{base};
		print "maint script: $num $base\n";
	}

	maint_closelog();
	exit(0);
}

my $cd = maint_getconfigdir();
my $ch = maint_getconfig( "hostclass:source" );
my $cf = maint_getconfig( "hostclass:file" );
maint_log( LOG_WARNING, "debug: configdir=$cd, hostclass:source=$ch, hostclass:file=$cf" );

# Reload cached class data
maint_lockname($scriptlock);
maint_log( LOG_ERR, 'Cannot get lock, aborting' ) unless maint_setlock();
maint_reloadclasses(1);
@classlist = maint_listclasses();
maint_clearlock();

# Run desired scripts (if allowed)
my %requestedscripts = map { $_ => 1 } @scripts;

maint_log( LOG_WARNING, "debug: want to run scripts @scripts" );
maint_lognewline();

foreach my $sc (@scriptinfo)
{
	my $num = $sc->{num};
	my $base = $sc->{base};
	my $scriptpath = $sc->{file};
	my $scriptname = basename( $scriptpath );

	maint_log(LOG_WARNING, "Found maint path $scriptpath, file $scriptname, number=$num, base=$base");
	$scriptdirs{$num} = { path => $scriptpath, file => $scriptname, base => $base, run => 0 };
	if (@scripts == 0 || exists $requestedscripts{$base})
	{
		# We want to run this
		$scriptdirs{$num}->{run} = 1;
		delete $requestedscripts{$base};    # Got it
	}

	# should we exclude any scripts due to runwhen/runon constraints?
	my $mode = maint_getattr('mode');
	unless( maint_runwhen($scriptname, $mode) )
	{
		maint_log(LOG_WARNING, "Skipping $scriptname due to runwhen/ constraint");
		maint_lognewline();
		$scriptdirs{$num}->{run} = 0;
	}
	unless( maint_checkrunon($scriptname, \@classlist ))
	{
		maint_log(LOG_WARNING, "Skipping $scriptname due to runon/ constraint");
		maint_lognewline();
		$scriptdirs{$num}->{run} = 0;
	}
}
foreach my $t (sort keys %requestedscripts)
{
	maint_log(LOG_WARNING, "Ignoring non-existent script $t");
	maint_lognewline();
}

# Run all requested on local machine
# Note, numeric sorting, not string order
@scripts = sort { $a <=> $b } keys %scriptdirs;

my @runscripts = grep { $scriptdirs{$_}->{run} } @scripts;

# Generate list of scripts that will be run and announce.
my $lists = join(",", map { $scriptdirs{$_}->{base} } @runscripts );
maint_log(LOG_WARNING, "about to run $lists");
maint_lognewline();

foreach my $k ( @runscripts )
{
	runmaintscript($scriptdirs{$k}->{path}, @ARGV);
}
maint_closelog();
exit;

=head1 AUTHORS

Duncan White E<lt>dcw@imperial.ac.ukE<gt>,
Lloyd Kamara E<lt>ldk@imperial.ac.ukE<gt>,
Matt Johnson E<lt>mwj@doc.ic.ac.ukE<gt>,
David McBride E<lt>dwm@doc.ic.ac.ukE<gt>,
Adam Langley, E<lt>agl@imperialviolet.orgE<gt>,
Tim Southerwood, E<lt>ts@dionic.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2003-2018 Department of Computing, Imperial College London

=cut
